Automatically generated by Mendeley Desktop 1.19.5
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Fitzpatrick2008,
abstract = {Robot projects are often evolutionary dead ends, with the software and hardware they produce disappearing without trace afterwards. In humanoid robotics, a small field with an avid appetite for novel devices, we experience a great deal of "churn" of this nature. In this paper, we explore how best to make our projects stable and long-lasting, without compromising our ability to constantly change our sensors, actuators, processors and networks. We also look at how to encourage the propagation and evolution of hardware designs, so that we can start to build up a "gene-pool" of material to draw upon for new projects. We advance on two fronts, software and hardware. For some time, we have been developing and using the YARP robot software architecture [Giorgio Metta, Paul Fitzpatrick, Lorenzo Natale, YARP: Yet another robot platform, International Journal on Advanced Robotics Systems 3 (2006) 43-48], which helps organize communication between sensors, processors, and actuators so that loose coupling is encouraged, making gradual system evolution much easier. YARP includes a model of communication that is transport-neutral, so that data flow is decoupled from the details of the underlying networks and protocols in use. Importantly for the long term, YARP is designed to play well with other architectures. Device drivers written for YARP can be ripped out and used without any "middleware". On the network, basic interoperation is possible with a few lines of code in any language with a socket library, and maximally efficient interoperation can be achieved by following documented protocols. These features are not normally the first things that end-users look for when starting a project, but they are crucial for longevity. We emphasize the strategic utility of the Free Software social contract [B. Perens, The open source definition, in: Chris DiBona, Sam Ockman, Mark Stone (Eds.), Open Sources: Voices from the Open Source Revolution, O'Reilly and Associates, Cambridge, MA, 1999] to software development for small communities with idiosyncratic requirements. We also work to expand our community by releasing the design of our ICub humanoid [N.G. Tsagarakis, G. Metta, G. Sandini, D. Vernon, R. Beira, F. Becchi, L. Righetti, J. Santos-Victor, A.J. Ijspeert, M.C. Carrozza, D.G. Caldwell, iCub - The design and realization of an open humanoid platform for cognitive and neuroscience research, Journal of Advanced Robotics 21 (10) (2007) 1151-1175] under a free and open licence, and funding development using this platform. {\textcopyright} 2007 Elsevier Ltd. All rights reserved.},
author = {Fitzpatrick, Paul and Metta, Giorgio and Natale, Lorenzo},
doi = {10.1016/j.robot.2007.09.014},
issn = {09218890},
journal = {Rob. Auton. Syst.},
keywords = {Device drivers,Free software,Humanoid robotics,ICub humanoid,YARP},
month = {jan},
number = {1},
pages = {29--45},
title = {{Towards long-lived robot genes}},
url = {https://linkinghub.elsevier.com/retrieve/pii/S0921889007001364},
volume = {56},
year = {2008}
}
@inproceedings{Paikan2014,
abstract = {Systematically developing high-quality reusable software components is a difficult task and requires careful design to find a proper balance between potential reuse, functionalities and ease of implementation. Extendibility is an important property for software which helps to reduce cost of development and significantly boosts its reusability. This work introduces an approach to enhance components reusability by extending their functionalities using plug-ins at the level of the connection points (ports). Application-dependent functionalities such as data monitoring and arbitration can be implemented using a conventional scripting language and plugged into the ports of components. The main advantage of our approach is that it avoids to introduce application-dependent modifications to existing components, thus reducing development time and fostering the development of simpler and therefore more reusable components. Another advantage of our approach is that it reduces communication and deployment overheads as extra functionalities can be added without introducing additional modules. The details of the plug-in system is described in the paper and its advantages for the development of robotics applications are demonstrated by developing a step-by-step example on the iCub humanoid robot.},
author = {Paikan, Ali and Atikhanoff, Vadim and Metta, Giorgio and Natale, Lorenzo},
booktitle = {IEEE Int. Conf. Intell. Robot. Syst.},
doi = {10.1109/IROS.2014.6942762},
isbn = {9781479969340},
issn = {21530866},
month = {sep},
pages = {1555--1562},
publisher = {IEEE},
title = {{Enhancing software module reusability using port plug-ins: An experiment with the iCub robot}},
url = {http://ieeexplore.ieee.org/document/6942762/},
year = {2014}
}
@misc{MRPT,
author = {{The Mobile Robot Programming Toolkit}},
title = {{MRPT | Empowering C++ development in robotics}},
url = {https://www.mrpt.org/ http://www.mrpt.org/},
year = {2010}
}
@inproceedings{Paikan2015,
abstract = {Application domains of robotic systems are growing in complexity. It seems therefore plausible that robotic software will continue to be designed to be executed on distributed computer architectures interconnected through a network. It is a common practice today to rely on best-effort performance and assume that the latter are adequate given enough computational and networking resources. This approach however does not make best use of the available resources and, maybe more importantly, does not guarantee that performance remain constant over time. Real-time and Quality of Service become therefore important aspects in the software architecture of a robot. This article describes an approach for introducing these concepts in a publish-subscribe software middleware. The key contribution of our approach is that it leverages on the services provided by the operating system (scheduling priority and packet QoS) and abstracts them in a set of levels of priority that can be assigned dynamically, and with the granularity of individual communication channels. We implemented our approach on the YARP middleware and performed an experimental evaluation that demonstrates its benefit for increasing determinism and reducing latency in data communication. We further demonstrate this in a real-robot experiment that shows increased performance in a closed-loop scenario.},
author = {Paikan, Ali and Pattacini, Ugo and Domenichelli, Daniele and Randazzo, Marco and Metta, Giorgio and Natale, Lorenzo},
booktitle = {IEEE Int. Conf. Intell. Robot. Syst.},
doi = {10.1109/IROS.2015.7353611},
isbn = {9781479999941},
issn = {21530866},
month = {sep},
pages = {1799--1805},
publisher = {IEEE},
title = {{A best-effort approach for run-time channel prioritization in real-time robotic application}},
url = {http://ieeexplore.ieee.org/document/7353611/},
volume = {2015-Decem},
year = {2015}
}
@inproceedings{Huang2010b,
abstract = {We describe the Lightweight Communications and Marshalling (LCM) library for message passing and data marshalling. The primary goal of LCM is to simplify the development of low-latency message passing systems, especially for real-time robotics research applications. Messages can be transmitted between different processes using LCM's publish/subscribe message-passing system. A platform- and language-independent type specification language separates message description from implementation. Message specifications are automatically compiled into language-specific bindings, eliminating the need for users to implement marshalling code while guaranteeing run-time type safety. LCM is notable in providing a real-time deep traffic inspection tool that can decode and display message traffic with minimal user effort and no impact on overall system performance. This and other features emphasize LCM's focus on simplifying both the development and debugging of message passing systems. In this paper, we explain the design of LCM, evaluate its performance, and describe its application to a number of autonomous land, underwater, and aerial robots. {\textcopyright}2010 IEEE.},
author = {Huang, Albert S. and Olson, Edwin and Moore, David C.},
booktitle = {IEEE/RSJ 2010 Int. Conf. Intell. Robot. Syst. IROS 2010 - Conf. Proc.},
doi = {10.1109/IROS.2010.5649358},
isbn = {9781424466757},
pages = {4057--4062},
title = {{LCM: Lightweight Communications and Marshalling}},
url = {https://lcm-proj.github.io/ https://github.com/lcm-proj/lcm},
year = {2010}
}
@misc{MicrosoftRobotics,
author = {Microsoft},
booktitle = {Microsoft.com},
title = {{Download Microsoft Robotics Developer Studio 4 from Official Microsoft Download Center}},
url = {https://www.microsoft.com/en-us/download/details.aspx?id=29081}
}
@inproceedings{Paikan2017,
abstract = {Real-Time communication is important in distributed applications when timing constraints on task execution and data processing play a fundamental role. Software engineering does not yet specify how real-time properties should be integrated into a publish/subscribe middleware. This article describes an approach for integration of priority Quality of Service (QoS) in a publish/subscribe middleware. The basic idea is to leverage the operating system functionalities to provide a framework where specific communication channels can be prioritized at run-time. This paper presents an implementation of our approach in the YARP (Yet Another Robot Platform) open source middleware and a preliminary experimental evaluation of its performance.},
archivePrefix = {arXiv},
arxivId = {1504.02128},
author = {Paikan, Ali and Domenichelli, Daniele and Natale, Lorenzo},
booktitle = {2015 IEEE 8th Work. Softw. Eng. Archit. Realt. Interact. Syst. SEARIS 2015},
doi = {10.1109/SEARIS.2015.7854100},
eprint = {1504.02128},
isbn = {9781467368810},
keywords = {[Communication],[Publish-Subscribe Architecture],[Quality Of Service] [Channel prioritization],[Real-time system]},
month = {mar},
pages = {41--45},
publisher = {IEEE},
title = {{Communication channel prioritization in a publish-subscribe architecture}},
url = {http://ieeexplore.ieee.org/document/7854100/},
year = {2017}
}
@misc{Pocolibs,
title = {{pocolibs - Openrobots}},
url = {https://www.openrobots.org/wiki/pocolibs/}
}
@misc{Metta2006,
abstract = {We describe YARP, Yet Another Robot Platform, an open-source project that encapsulates lessons from our experience in building humanoid robots. The goal of YARP is to minimize the effort devoted to infrastructure-level software development by facilitating code reuse, modularity and so maximize research-level development and collaboration. Humanoid robotics is a "bleeding edge" field of research, with constant flux in sensors, actuators, and processors. Code reuse and maintenance is therefore a significant challenge. We describe the main problems we faced and the solutions we adopted. In short, the main features of YARP include support for inter-process communication, image processing as well as a class hierarchy to ease code reuse across different hardware platforms. YARP is currently used and tested on Windows, Linux and QNX6 which are common operating systems used in robotics.},
author = {Metta, Giorgio and Fitzpatrick, Paul and Natale, Lorenzo},
booktitle = {Int. J. Adv. Robot. Syst.},
doi = {10.5772/5761},
issn = {17298806},
keywords = {Humanoid robotics,Interprocess communication,Software platform},
month = {mar},
number = {1},
pages = {043--048},
title = {{YARP: Yet another robot platform}},
url = {http://journals.sagepub.com/doi/10.5772/5761},
volume = {3},
year = {2006}
}
@misc{ROS,
abstract = {The Robot Operating System (ROS) is a set of software libraries and tools that help you build robot applications. From drivers to state-of-the-art algorithms, and with powerful developer tools, ROS has what you need for your next robotics project. And it's all open source.},
author = {Ros.org},
booktitle = {website},
pages = {1},
title = {{ROS.org | Powering the world's robots}},
url = {https://www.ros.org/ http://www.ros.org/},
urldate = {2019-12-04},
year = {2016}
}
@misc{ROS2,
author = {{Open Source Robotcs}},
pages = {8},
title = {{Ros 2}},
url = {https://design.ros2.org/}
}
@misc{ZeroMQ,
title = {{ZeroMQ}},
url = {https://zeromq.org/},
urldate = {2019-12-04}
}
